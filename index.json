{
  "api/EmotionalCities.Tinkerforge.AirQuality.html": {
    "href": "api/EmotionalCities.Tinkerforge.AirQuality.html",
    "title": "Class AirQuality",
    "keywords": "Class AirQuality Represents an operator that measures IAQ (indoor air quality) index, air pressure, humidity and temperature from an Air Quality Bricklet. Inheritance Object AirQuality Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class AirQuality : Combinator<IPConnection, AirQualityDataFrame> Properties | Improve this Doc View Source BackgroundCalibrationDuration Gets or sets a value specifying the duration of background calibration (requires power cycle to change). Declaration public AirQualityBackgroundCalibrationDuration BackgroundCalibrationDuration { get; set; } Property Value Type Description AirQualityBackgroundCalibrationDuration | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public AirQualityStatusLedConfig StatusLed { get; set; } Property Value Type Description AirQualityStatusLedConfig | Improve this Doc View Source TemperatureOffset Gets or sets a value specifying a temperature offset, in hundredths of a degree, to compensate for heat inside an enclosure. Declaration public int TemperatureOffset { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures IAQ (indoor air quality) index, air pressure, humidity and temperature from an Air Quality Bricklet. Declaration public override IObservable<AirQualityDataFrame> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < AirQualityDataFrame > the A sequence of AirQualityDataFrame objects representing the measurements from the Air Quality Bricklet. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.AirQualityAccuracy.html": {
    "href": "api/EmotionalCities.Tinkerforge.AirQualityAccuracy.html",
    "title": "Enum AirQualityAccuracy",
    "keywords": "Enum AirQualityAccuracy Specifies the accuracy of the IAQ index. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AirQualityAccuracy : byte Fields Name Description High The Bricklet is calibrated successfully. Low The background history is uncertain. This typically means the gas sensor data was too stable for the calibration algorithm to clearly define its references. Medium The Bricklet found new calibration data and is currently calibrating. Unreliable The Bricklet was just started and the sensor is stabilizing."
  },
  "api/EmotionalCities.Tinkerforge.AirQualityBackgroundCalibrationDuration.html": {
    "href": "api/EmotionalCities.Tinkerforge.AirQualityBackgroundCalibrationDuration.html",
    "title": "Enum AirQualityBackgroundCalibrationDuration",
    "keywords": "Enum AirQualityBackgroundCalibrationDuration Specifies the duration of the background calibration for the Air Quality Bricklet. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AirQualityBackgroundCalibrationDuration : byte Fields Name Description Days28 Specifies that the automatic background calibration of the IAQ index will run for 28 days. Days4 Specifies that the automatic background calibration of the IAQ index will run for 4 days."
  },
  "api/EmotionalCities.Tinkerforge.AirQualityDataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.AirQualityDataFrame.html",
    "title": "Struct AirQualityDataFrame",
    "keywords": "Struct AirQualityDataFrame Represents a set of measurement values sampled from an Air Quality Bricklet. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct AirQualityDataFrame Constructors | Improve this Doc View Source AirQualityDataFrame(Int32, AirQualityAccuracy, Int32, Int32, Int32) Initializes a new instance of the AirQualityDataFrame structure. Declaration public AirQualityDataFrame(int iaqIndex, AirQualityAccuracy iaqAccuracy, int temperature, int humidity, int airPressure) Parameters Type Name Description Int32 iaqIndex The IAQ (indoor air quality) index. AirQualityAccuracy iaqAccuracy The IAQ index accuracy. Int32 temperature The current temperature value. Int32 humidity The current relative humidity value. Int32 airPressure The current air pressure value. Fields | Improve this Doc View Source AirPressure Represents the current air pressure in hundredths of hPa. Declaration public int AirPressure Field Value Type Description Int32 | Improve this Doc View Source Humidity Represents the relative humidity in hundredths of percentage points (%RH). Declaration public int Humidity Field Value Type Description Int32 | Improve this Doc View Source IaqIndex Represents the IAQ (indoor air quality) index, between 0 (best) and 500 (worst). Declaration public int IaqIndex Field Value Type Description Int32 | Improve this Doc View Source IaqIndexAccuracy Represents the IAQ index accuracy. Declaration public AirQualityAccuracy IaqIndexAccuracy Field Value Type Description AirQualityAccuracy | Improve this Doc View Source Temperature Represents the current temperature, in hundredths of a degree (celsius). Declaration public int Temperature Field Value Type Description Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.AirQualityStatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.AirQualityStatusLedConfig.html",
    "title": "Enum AirQualityStatusLedConfig",
    "keywords": "Enum AirQualityStatusLedConfig Specifies the behavior of the Air Quality Bricklet status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AirQualityStatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.AmbientLightV3.html": {
    "href": "api/EmotionalCities.Tinkerforge.AmbientLightV3.html",
    "title": "Class AmbientLightV3",
    "keywords": "Class AmbientLightV3 Represents an operator that measures ambient illuminance from an Ambient Light Bricklet 3.0. Inheritance Object AmbientLightV3 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class AmbientLightV3 : Combinator<IPConnection, long> Properties | Improve this Doc View Source IlluminanceRange Gets or sets a value specifying the measurement range for the ambient light sensor. Smaller illumination ranges increase the resolution of the data. Declaration public AmbientLightV3IlluminanceRange IlluminanceRange { get; set; } Property Value Type Description AmbientLightV3IlluminanceRange | Improve this Doc View Source IntegrationTime Gets or sets a value specifying the integration time of the sensor. Larger integration times result in less noise in the data. Declaration public AmbientLightV3IntegrationTime IntegrationTime { get; set; } Property Value Type Description AmbientLightV3IntegrationTime | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public AmbientLightV3StatusLedConfig StatusLed { get; set; } Property Value Type Description AmbientLightV3StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures ambient light level from an Ambient Light Bricklet 3.0. Declaration public override IObservable<long> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int64 > A sequence of Int64 values representing the illuminance measurements from the Ambient Light Bricklet 3.0. in units of 1/100lux. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.AmbientLightV3IlluminanceRange.html": {
    "href": "api/EmotionalCities.Tinkerforge.AmbientLightV3IlluminanceRange.html",
    "title": "Enum AmbientLightV3IlluminanceRange",
    "keywords": "Enum AmbientLightV3IlluminanceRange Specifies the illuminance range for the Ambient Light Bricklet 3.0. Smaller illuminance ranges increase the resolution of the data. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AmbientLightV3IlluminanceRange : byte Fields Name Description Range1300Lux Specifies an illuminance range of 0-1300lux. Range16000Lux Specifies an illuminance range of 0-16000lux. Range32000Lux Specifies an illuminance range of 0-32000lux. Range600Lux Specifies an illuminance range of 0-600lux. Range64000Lux Specifies an illuminance range of 0-64000lux. Range8000Lux Specifies an illuminance range of 0-8000lux. RangeUnlimited Specifies an illuminance range of 0-~100000lux."
  },
  "api/EmotionalCities.Tinkerforge.AmbientLightV3IntegrationTime.html": {
    "href": "api/EmotionalCities.Tinkerforge.AmbientLightV3IntegrationTime.html",
    "title": "Enum AmbientLightV3IntegrationTime",
    "keywords": "Enum AmbientLightV3IntegrationTime Specifies the integration time for the Ambient Light Bricklet 3.0. Larger integration times result in less noise in the data. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AmbientLightV3IntegrationTime : byte Fields Name Description Integration100ms Specifies an integration time of 100ms. Integration150ms Specifies an integration time of 150ms. Integration200ms Specifies an integration time of 200ms. Integration250ms Specifies an integration time of 250ms. Integration300ms Specifies an integration time of 300ms. Integration350ms Specifies an integration time of 350ms. Integration400ms Specifies an integration time of 400ms. Integration50ms Specifies an integration time of 50ms."
  },
  "api/EmotionalCities.Tinkerforge.AmbientLightV3StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.AmbientLightV3StatusLedConfig.html",
    "title": "Enum AmbientLightV3StatusLedConfig",
    "keywords": "Enum AmbientLightV3StatusLedConfig Specifies the behavior of the Ambient Light Bricklet 3.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AmbientLightV3StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.AnalogInV3.html": {
    "href": "api/EmotionalCities.Tinkerforge.AnalogInV3.html",
    "title": "Class AnalogInV3",
    "keywords": "Class AnalogInV3 Represents an operator that measures an analog voltage signal from an Analog In Bricklet 3.0. Inheritance Object AnalogInV3 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class AnalogInV3 : Combinator<IPConnection, int> Properties | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public AnalogInV3StatusLedConfig StatusLed { get; set; } Property Value Type Description AnalogInV3StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures an analog voltage signal from an Analog In Bricklet 3.0. Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the measurements from the Analog In Bricklet 3.0. in units of 1mV. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.AnalogInV3StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.AnalogInV3StatusLedConfig.html",
    "title": "Enum AnalogInV3StatusLedConfig",
    "keywords": "Enum AnalogInV3StatusLedConfig Specifies the behavior of the Analog In Bricklet 3.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AnalogInV3StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.AnalogOutV3.html": {
    "href": "api/EmotionalCities.Tinkerforge.AnalogOutV3.html",
    "title": "Class AnalogOutV3",
    "keywords": "Class AnalogOutV3 Represents an operator that writes an analog output voltage signal to an Analog Out Bricklet 3.0. Inheritance Object AnalogOutV3 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class AnalogOutV3 Properties | Improve this Doc View Source InitialVoltage Gets or sets the initial voltage on initialisation. If a value is not provided the voltage will not change on initialisation. Declaration public int? InitialVoltage { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public AnalogOutV3StatusLedConfig StatusLed { get; set; } Property Value Type Description AnalogOutV3StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Writes only the initial voltage to an Analog Out Bricklet 3.0. Declaration public IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the written voltage in units of 1mV. | Improve this Doc View Source Process(IObservable<IPConnection>, IObservable<Int32>) Writes a sequence of voltage values to an Analog Out Bricklet 3.0. Declaration public IObservable<int> Process(IObservable<IPConnection> source, IObservable<int> signal) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. IObservable < Int32 > signal A sequence of Int32 values to write as voltages to the analog out in units of 1mV. Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the written voltage in units of 1mV. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.AnalogOutV3StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.AnalogOutV3StatusLedConfig.html",
    "title": "Enum AnalogOutV3StatusLedConfig",
    "keywords": "Enum AnalogOutV3StatusLedConfig Specifies the behavior of the Analog Out Bricklet 3.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum AnalogOutV3StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.CO2V2.html": {
    "href": "api/EmotionalCities.Tinkerforge.CO2V2.html",
    "title": "Class CO2V2",
    "keywords": "Class CO2V2 Represents an operator that measures CO2 concentration, temperature and humidity from a CO2 Bricklet 2.0. Inheritance Object CO2V2 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class CO2V2 : Combinator<IPConnection, CO2V2DataFrame> Properties | Improve this Doc View Source AirPressure Gets or sets a value specifying the ambient air pressure, in units of 1hPa. Can be used to increase the accuracy of the CO2 Bricklet 2.0. Declaration public int AirPressure { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public CO2V2StatusLedConfig StatusLed { get; set; } Property Value Type Description CO2V2StatusLedConfig | Improve this Doc View Source TemperatureOffset Gets or sets a value specifying a temperature offset, in hundredths of a degree, to compensate for heat inside an enclosure. Declaration public int TemperatureOffset { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures CO2 concentration, temperature and humidity from a CO2 Bricklet 2.0. Declaration public override IObservable<CO2V2DataFrame> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < CO2V2DataFrame > A sequence of CO2V2DataFrame objects representing the measurements from the CO2 Bricklet 2.0. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.CO2V2DataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.CO2V2DataFrame.html",
    "title": "Struct CO2V2DataFrame",
    "keywords": "Struct CO2V2DataFrame Represents a set of measurement values sampled from an CO2 Bricklet 2.0. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct CO2V2DataFrame Constructors | Improve this Doc View Source CO2V2DataFrame(Int32, Int16, Int32) Initializes a new instance of the CO2V2DataFrame structure. Declaration public CO2V2DataFrame(int co2Concentration, short temperature, int humidity) Parameters Type Name Description Int32 co2Concentration The CO2 concentration. Int16 temperature The current temperature value. Int32 humidity The current humidity value. Fields | Improve this Doc View Source CO2Concentration Represents the CO2 concentration in units of 1ppm. Declaration public int CO2Concentration Field Value Type Description Int32 | Improve this Doc View Source Humidity Represents the relative humidity in hundredths of percentage points (%RH). Declaration public int Humidity Field Value Type Description Int32 | Improve this Doc View Source Temperature Represents the current temperature, in hundredths of a degree (celsius). Declaration public short Temperature Field Value Type Description Int16 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.CO2V2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.CO2V2StatusLedConfig.html",
    "title": "Enum CO2V2StatusLedConfig",
    "keywords": "Enum CO2V2StatusLedConfig Specifies the behavior of the CO2 Bricklet 2.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum CO2V2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.CreateBrickConnection.html": {
    "href": "api/EmotionalCities.Tinkerforge.CreateBrickConnection.html",
    "title": "Class CreateBrickConnection",
    "keywords": "Class CreateBrickConnection Represents an operator that creates a TCP/IP connection to the Brick Daemon. Inheritance Object CreateBrickConnection Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class CreateBrickConnection Properties | Improve this Doc View Source HostName Gets or sets a value specifying the DNS name of the Brick Daemon on which you intend to connect. Declaration public string HostName { get; set; } Property Value Type Description String | Improve this Doc View Source Port Gets or sets a value specifying port number of the Brick Daemon on which you intend to connect. Declaration public int Port { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Secret Gets or sets a value specifying the optional secred used when establishing authenticated connections to the Brick Daemon Declaration public string Secret { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Creates a TCP/IP connection to the Brick Daemon Declaration public IObservable<IPConnection> Generate() Returns Type Description IObservable < IPConnection > A sequence of objects representing the connection to the Brick Daemon."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2.html",
    "title": "Class GPSV2",
    "keywords": "Class GPSV2 Represents an operator that generates a device instance for a GPS Bricklet 2.0. Can be connected to Coordinate, Altitude, DateTime and Status output streams. Inheritance Object GPSV2 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class GPSV2 : Combinator<IPConnection, BrickletGPSV2> Properties | Improve this Doc View Source AltitudePeriod Gets or sets a value specifying the period between altitude sample event callbacks. A value of zero disables event reporting. Declaration public long AltitudePeriod { get; set; } Property Value Type Description Int64 | Improve this Doc View Source CoordinatePeriod Gets or sets a value specifying the period between coordinate sample event callbacks. A value of zero disables event reporting. Declaration public long CoordinatePeriod { get; set; } Property Value Type Description Int64 | Improve this Doc View Source DateTimePeriod Gets or sets a value specifying the period between datetime sample event callbacks. A value of zero disables event reporting. Declaration public long DateTimePeriod { get; set; } Property Value Type Description Int64 | Improve this Doc View Source SBAS Gets or sets a value specifying the SBAS (Satellite-Based Augmentation System) configuration. If SBAS is enabled, the position accuracy increases (if SBAS satellites are in view), but the update rate is limited to 5Hz. With SBAS disabled the update rate is increased to 10Hz. Declaration public GPSV2SBASConfig SBAS { get; set; } Property Value Type Description GPSV2SBASConfig | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public GPSV2StatusLedConfig StatusLed { get; set; } Property Value Type Description GPSV2StatusLedConfig | Improve this Doc View Source StatusPeriod Gets or sets a value specifying the period between status sample event callbacks. A value of zero disables event reporting. Declaration public long StatusPeriod { get; set; } Property Value Type Description Int64 | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Generates a device instance for a GPS Bricklet 2.0. Declaration public override IObservable<BrickletGPSV2> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < BrickletGPSV2 > A sequence of objects representing a handle to the GPS Bricklet 2.0. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.GPSV2Altitude.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2Altitude.html",
    "title": "Class GPSV2Altitude",
    "keywords": "Class GPSV2Altitude Represents an operator that generates an altitude data stream from a GPS Bricklet 2.0. Inheritance Object GPSV2Altitude Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class GPSV2Altitude : Combinator<BrickletGPSV2, GPSV2AltitudeDataFrame> Methods | Improve this Doc View Source Process(IObservable<BrickletGPSV2>) Measures altitude data from a GPS Bricklet 2.0. Declaration public override IObservable<GPSV2AltitudeDataFrame> Process(IObservable<BrickletGPSV2> source) Parameters Type Name Description IObservable < BrickletGPSV2 > source A sequence containing the connection to a GPS Bricklet 2.0. Returns Type Description IObservable < GPSV2AltitudeDataFrame > A sequence of GPSV2AltitudeDataFrame objects representing the altitude measurements from the GPS Bricklet 2.0."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2AltitudeDataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2AltitudeDataFrame.html",
    "title": "Struct GPSV2AltitudeDataFrame",
    "keywords": "Struct GPSV2AltitudeDataFrame Represents a set of altitude values sampled from a GPS Bricklet 2.0. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct GPSV2AltitudeDataFrame Constructors | Improve this Doc View Source GPSV2AltitudeDataFrame(Int32, Int32) Initializes a new instance of the GPSV2AltitudeDataFrame structure. Declaration public GPSV2AltitudeDataFrame(int altitude, int geoidalSeparation) Parameters Type Name Description Int32 altitude The altitude value. Int32 geoidalSeparation The geoidal separation. Fields | Improve this Doc View Source Altitude Represents the altitude in units of 1cm. Declaration public int Altitude Field Value Type Description Int32 | Improve this Doc View Source GeoidalSeparation Represents the geoidal separation in units of 1cm. Declaration public int GeoidalSeparation Field Value Type Description Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.GPSV2Coordinate.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2Coordinate.html",
    "title": "Class GPSV2Coordinate",
    "keywords": "Class GPSV2Coordinate Represents an operator that generates a coordinate data stream from a GPS Bricklet 2.0. Inheritance Object GPSV2Coordinate Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class GPSV2Coordinate : Combinator<BrickletGPSV2, GPSV2CoordinateDataFrame> Methods | Improve this Doc View Source Process(IObservable<BrickletGPSV2>) Measures coordinate data from a GPS Bricklet 2.0. Declaration public override IObservable<GPSV2CoordinateDataFrame> Process(IObservable<BrickletGPSV2> source) Parameters Type Name Description IObservable < BrickletGPSV2 > source A sequence containing the connection to a GPS Bricklet 2.0. Returns Type Description IObservable < GPSV2CoordinateDataFrame > A sequence of GPSV2CoordinateDataFrame objects representing the coordinate measurements from the GPS Bricklet 2.0."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2CoordinateDataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2CoordinateDataFrame.html",
    "title": "Struct GPSV2CoordinateDataFrame",
    "keywords": "Struct GPSV2CoordinateDataFrame Represents a set of coordinate values sampled from a GPS Bricklet 2.0. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct GPSV2CoordinateDataFrame Constructors | Improve this Doc View Source GPSV2CoordinateDataFrame(Int64, Int64, Char, Char) Initializes a new instance of the GPSV2CoordinateDataFrame structure. Declaration public GPSV2CoordinateDataFrame(long latitude, long longitude, char ns, char ew) Parameters Type Name Description Int64 latitude The latitude value. Int64 longitude The longitude value. Char ns The cardinal direction of the latitude value ('N' or 'S'). Char ew The cardinal direction of the longitude value ('E' or 'W'). Fields | Improve this Doc View Source EW Represents the cardinal direction of the longitude value. Declaration public char EW Field Value Type Description Char | Improve this Doc View Source Latitude Represents the latitude in units of 1/1000000ths of a degree. Declaration public long Latitude Field Value Type Description Int64 | Improve this Doc View Source Longitude Represents the longitude in units of 1/1000000ths of a degree. Declaration public long Longitude Field Value Type Description Int64 | Improve this Doc View Source NS Represents the cardinal direction of the latitude value. Declaration public char NS Field Value Type Description Char Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.GPSV2DateTime.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2DateTime.html",
    "title": "Class GPSV2DateTime",
    "keywords": "Class GPSV2DateTime Represents an operator that generates a datetime data stream from a GPS Bricklet 2.0. Inheritance Object GPSV2DateTime Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class GPSV2DateTime : Combinator<BrickletGPSV2, GPSV2DateTimeDataFrame> Methods | Improve this Doc View Source Process(IObservable<BrickletGPSV2>) Measures datetime data from a GPS Bricklet 2.0. Declaration public override IObservable<GPSV2DateTimeDataFrame> Process(IObservable<BrickletGPSV2> source) Parameters Type Name Description IObservable < BrickletGPSV2 > source A sequence containing the connection to a GPS Bricklet 2.0. Returns Type Description IObservable < GPSV2DateTimeDataFrame > A sequence of GPSV2DateTimeDataFrame objects representing the datetime measurements from the GPS Bricklet 2.0."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2DateTimeDataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2DateTimeDataFrame.html",
    "title": "Struct GPSV2DateTimeDataFrame",
    "keywords": "Struct GPSV2DateTimeDataFrame Represents a set of altitude values sampled from a GPS Bricklet 2.0. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct GPSV2DateTimeDataFrame Constructors | Improve this Doc View Source GPSV2DateTimeDataFrame(Int64, Int64) Initializes a new instance of the GPSV2DateTimeDataFrame structure. Declaration public GPSV2DateTimeDataFrame(long date, long time) Parameters Type Name Description Int64 date The date value (ddmmyy). Int64 time The time value (hhmmss.sss). Fields | Improve this Doc View Source Date Represents the date in ddmmyy format. Declaration public long Date Field Value Type Description Int64 | Improve this Doc View Source Time Represents the time in hhmmss.sss format. Declaration public long Time Field Value Type Description Int64 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.GPSV2GeographyPoint.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2GeographyPoint.html",
    "title": "Class GPSV2GeographyPoint",
    "keywords": "Class GPSV2GeographyPoint Represents an operator that retrieves a stream of geography points, with or without altitude, from a sequence of GPSV2 coordinates. Inheritance Object GPSV2GeographyPoint Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class GPSV2GeographyPoint Methods | Improve this Doc View Source Process(IObservable<GPSV2CoordinateDataFrame>) Retrieves a stream of geography points from a sequence of GPSV2 coordinates. Declaration public IObservable<GeographyPoint> Process(IObservable<GPSV2CoordinateDataFrame> source) Parameters Type Name Description IObservable < GPSV2CoordinateDataFrame > source A sequence of GPSV2CoordinateDataFrame representing a GPS coordinate. Returns Type Description IObservable < GeographyPoint > A sequence of objects representing the GPS location. | Improve this Doc View Source Process(IObservable<Tuple<GPSV2CoordinateDataFrame, GPSV2AltitudeDataFrame>>) Retrieves a stream of geography points with altitude information from a sequence of pairs containing GPSV2 coordinates and altitude data. Declaration public IObservable<GeographyPoint> Process(IObservable<Tuple<GPSV2CoordinateDataFrame, GPSV2AltitudeDataFrame>> source) Parameters Type Name Description IObservable < Tuple < GPSV2CoordinateDataFrame , GPSV2AltitudeDataFrame >> source A sequence of pairs containing a GPSV2CoordinateDataFrame representing a GPS coordinate, and a GPSV2AltitudeDataFrame representing altitude data. Returns Type Description IObservable < GeographyPoint > A sequence of objects representing the GPS location with altitude information."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2SBASConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2SBASConfig.html",
    "title": "Enum GPSV2SBASConfig",
    "keywords": "Enum GPSV2SBASConfig Specifies the SBAS configuration. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum GPSV2SBASConfig : byte Fields Name Description Disabled Specifies that SBAS will be disabled. Enabled Specifies that SBAS will be enabled."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2Status.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2Status.html",
    "title": "Class GPSV2Status",
    "keywords": "Class GPSV2Status Represents an operator that generates a status data stream from a GPS Bricklet 2.0. Inheritance Object GPSV2Status Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class GPSV2Status : Combinator<BrickletGPSV2, GPSV2StatusDataFrame> Methods | Improve this Doc View Source Process(IObservable<BrickletGPSV2>) Measures status data from a GPS Bricklet 2.0. Declaration public override IObservable<GPSV2StatusDataFrame> Process(IObservable<BrickletGPSV2> source) Parameters Type Name Description IObservable < BrickletGPSV2 > source A sequence containing the connection to a GPS Bricklet 2.0. Returns Type Description IObservable < GPSV2StatusDataFrame > A sequence of GPSV2StatusDataFrame objects representing the status measurements from the GPS Bricklet 2.0."
  },
  "api/EmotionalCities.Tinkerforge.GPSV2StatusDataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2StatusDataFrame.html",
    "title": "Struct GPSV2StatusDataFrame",
    "keywords": "Struct GPSV2StatusDataFrame Represents a set of status values sampled from a GPS Bricklet 2.0. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct GPSV2StatusDataFrame Constructors | Improve this Doc View Source GPSV2StatusDataFrame(Boolean, Byte) Initializes a new instance of the GPSV2StatusDataFrame structure. Declaration public GPSV2StatusDataFrame(bool hasFix, byte satellitesView) Parameters Type Name Description Boolean hasFix Whether a fix is available. Byte satellitesView The number of satellites in view. Fields | Improve this Doc View Source HasFix Represents whether the GPS Bricklet 2.0. has a satellite fix. Declaration public bool HasFix Field Value Type Description Boolean | Improve this Doc View Source SatellitesView Represents the number of satellites in view. Declaration public byte SatellitesView Field Value Type Description Byte Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.GPSV2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.GPSV2StatusLedConfig.html",
    "title": "Enum GPSV2StatusLedConfig",
    "keywords": "Enum GPSV2StatusLedConfig Specifies the behavior of the GPS Bricklet 2.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum GPSV2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.html": {
    "href": "api/EmotionalCities.Tinkerforge.html",
    "title": "Namespace EmotionalCities.Tinkerforge",
    "keywords": "Namespace EmotionalCities.Tinkerforge Classes AirQuality Represents an operator that measures IAQ (indoor air quality) index, air pressure, humidity and temperature from an Air Quality Bricklet. AmbientLightV3 Represents an operator that measures ambient illuminance from an Ambient Light Bricklet 3.0. AnalogInV3 Represents an operator that measures an analog voltage signal from an Analog In Bricklet 3.0. AnalogOutV3 Represents an operator that writes an analog output voltage signal to an Analog Out Bricklet 3.0. CO2V2 Represents an operator that measures CO2 concentration, temperature and humidity from a CO2 Bricklet 2.0. CreateBrickConnection Represents an operator that creates a TCP/IP connection to the Brick Daemon. GPSV2 Represents an operator that generates a device instance for a GPS Bricklet 2.0. Can be connected to Coordinate, Altitude, DateTime and Status output streams. GPSV2Altitude Represents an operator that generates an altitude data stream from a GPS Bricklet 2.0. GPSV2Coordinate Represents an operator that generates a coordinate data stream from a GPS Bricklet 2.0. GPSV2DateTime Represents an operator that generates a datetime data stream from a GPS Bricklet 2.0. GPSV2GeographyPoint Represents an operator that retrieves a stream of geography points, with or without altitude, from a sequence of GPSV2 coordinates. GPSV2Status Represents an operator that generates a status data stream from a GPS Bricklet 2.0. HumidityV2 Represents an operator that measures relative humidity from a Humidity Bricklet 2.0. IndustrialAnalogOutV2 Represents an operator that writes an analog output voltage signal to an Industrial Analog Out Bricklet 2.0. IndustrialDual020mAV2 Represents an operator that measures current between 0 and 22.5mA from an Industrial Dual 0-20mA Bricklet. IndustrialPTC Represents an operator that measures temperature with Pt100 and Pt1000 sensors from a Industrial PTC Bricklet. ParticulateMatter Represents an operator that measures different sizes of particular matter from a Particulate Matter Bricklet. PTC Represents an operator that measures temperature with Pt100 and Pt1000 sensors from a PTC Bricklet. PTCV2 Represents an operator that measures temperature with Pt100 and Pt1000 sensors from a PTC Bricklet 2.0. SoundPressureLevel Represents an operator that measures sound pressure level (decibels) and spectrum from a Sound Pressure Level Bricklet. ThermocoupleV2 Represents an operator that measures temperature using thermocouple wires from a Thermocouple Bricklet 2.0. Structs AirQualityDataFrame Represents a set of measurement values sampled from an Air Quality Bricklet. CO2V2DataFrame Represents a set of measurement values sampled from an CO2 Bricklet 2.0. GPSV2AltitudeDataFrame Represents a set of altitude values sampled from a GPS Bricklet 2.0. GPSV2CoordinateDataFrame Represents a set of coordinate values sampled from a GPS Bricklet 2.0. GPSV2DateTimeDataFrame Represents a set of altitude values sampled from a GPS Bricklet 2.0. GPSV2StatusDataFrame Represents a set of status values sampled from a GPS Bricklet 2.0. ParticulateMatterDataFrame Represents a set of measurement values sampled from a Particulate Matter Bricklet. Enums AirQualityAccuracy Specifies the accuracy of the IAQ index. AirQualityBackgroundCalibrationDuration Specifies the duration of the background calibration for the Air Quality Bricklet. AirQualityStatusLedConfig Specifies the behavior of the Air Quality Bricklet status LED. AmbientLightV3IlluminanceRange Specifies the illuminance range for the Ambient Light Bricklet 3.0. Smaller illuminance ranges increase the resolution of the data. AmbientLightV3IntegrationTime Specifies the integration time for the Ambient Light Bricklet 3.0. Larger integration times result in less noise in the data. AmbientLightV3StatusLedConfig Specifies the behavior of the Ambient Light Bricklet 3.0. status LED. AnalogInV3StatusLedConfig Specifies the behavior of the Analog In Bricklet 3.0. status LED. AnalogOutV3StatusLedConfig Specifies the behavior of the Analog Out Bricklet 3.0. status LED. CO2V2StatusLedConfig Specifies the behavior of the CO2 Bricklet 2.0. status LED. GPSV2SBASConfig Specifies the SBAS configuration. GPSV2StatusLedConfig Specifies the behavior of the GPS Bricklet 2.0. status LED. HumidityV2HeaterConfig Specifies the configuration of the heater. HumidityV2StatusLedConfig Specifies the behavior of the Humidity Bricklet 2.0. status LED. IndustrialAnalogOutV2CurrentRange Specifies the current range configuration of the Industrial Analog Out Bricklet 2.0. The resolution will always be 12 bit, therefore precision is higher with a smaller range. IndustrialAnalogOutV2OutLedConfig Specifies the configuration of the Industrial Analog Out Bricklet 2.0. out LED. IndustrialAnalogOutV2OutLedStatusConfig Specifies the configuration of the Industrial Analog Out Bricklet 2.0. out status LED. IndustrialAnalogOutV2StatusLedConfig Specifies the behavior of the Industrial Analog Out Bricklet 2.0. status LED. IndustrialAnalogOutV2VoltageRange Specifies the voltage range configuration of the Industrial Analog Out Bricklet 2.0. The resolution will always be 12 bit, therefore precision is higher with a smaller range. IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig Specifies the behavior of the Industrial Dual 0-20mA Bricklet status LED. IndustrialPTCStatusLedConfig Specifies the behavior of the Industrial PTC Bricklet status LED. IndustrialPTCWireMode Specifies the wire mode configuration of a Industrial PTC Bricklet corresponding the wires of the sensor. ParticulateMatterStatusLedConfig Specifies the behavior of the Particulate Matter Bricklet status LED. PTC.PTCStatusLedConfig Specifies the behavior of the PTC Bricklet status LED. PTC.PTCWireMode Specifies the wire mode configuration of a PTC Bricklet corresponding the wires of the sensor. PTCV2.PTCV2StatusLedConfig Specifies the behavior of the PTC Bricklet 2.0. status LED. PTCV2.PTCV2WireMode Specifies the wire mode configuration of a PTC Bricklet 2.0. corresponding the wires of the sensor. SoundPressureLevelFftSize Specifies the size of the FFT for the Sound Pressure Level Bricklet. SoundPressureLevelStatusLedConfig Specifies the behavior of the Air Quality Bricklet status LED. SoundPressureLevelWeightingFunction Specifies the decibel weighting function for the Sound Pressure Level Bricklet. ThermocoupleV2AveragingSize Specifies the averaging size of the Thermocouple Bricklet 2.0. ThermocoupleV2FilterOption Specifies the filtering option for the Thermocouple Bricklet 2.0. ThermocoupleV2StatusLedConfig Specifies the behavior of the Thermocouple Bricklet 2.0. ThermocoupleV2ThermocoupleType Specifies the thermocouple type used with the Thermocouple Bricklet 2.0."
  },
  "api/EmotionalCities.Tinkerforge.HumidityV2.html": {
    "href": "api/EmotionalCities.Tinkerforge.HumidityV2.html",
    "title": "Class HumidityV2",
    "keywords": "Class HumidityV2 Represents an operator that measures relative humidity from a Humidity Bricklet 2.0. Inheritance Object HumidityV2 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class HumidityV2 : Combinator<IPConnection, int> Properties | Improve this Doc View Source Heater Gets or sets a value specifying the heater configuration. The heater can be used to dy the sensor in extremely wet conditions. Declaration public HumidityV2HeaterConfig Heater { get; set; } Property Value Type Description HumidityV2HeaterConfig | Improve this Doc View Source MovingAverageLengthHumidity Gets or sets a value specifying the moving average window length (number of samples) for humidity. A value of 1 turns off averaging. Declaration public int MovingAverageLengthHumidity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MovingAverageLengthTemperature Gets or sets a value specifying the moving average window length (number of samples) for temperature. A value of 1 turns off averaging. Declaration public int MovingAverageLengthTemperature { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public HumidityV2StatusLedConfig StatusLed { get; set; } Property Value Type Description HumidityV2StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures relative humidity from a Humidity Bricklet 2.0. Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the humidity measurements from the Humidity Bricklet 2.0. in hundredths of percentage points (%RH) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.HumidityV2HeaterConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.HumidityV2HeaterConfig.html",
    "title": "Enum HumidityV2HeaterConfig",
    "keywords": "Enum HumidityV2HeaterConfig Specifies the configuration of the heater. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum HumidityV2HeaterConfig : byte Fields Name Description Disabled Specifies that the heater will be disabled. Enabled Specifies that the heater will be enabled."
  },
  "api/EmotionalCities.Tinkerforge.HumidityV2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.HumidityV2StatusLedConfig.html",
    "title": "Enum HumidityV2StatusLedConfig",
    "keywords": "Enum HumidityV2StatusLedConfig Specifies the behavior of the Humidity Bricklet 2.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum HumidityV2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2.html",
    "title": "Class IndustrialAnalogOutV2",
    "keywords": "Class IndustrialAnalogOutV2 Represents an operator that writes an analog output voltage signal to an Industrial Analog Out Bricklet 2.0. Inheritance Object IndustrialAnalogOutV2 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class IndustrialAnalogOutV2 Properties | Improve this Doc View Source CurrentRange Gets or sets a value specifying the output current range. Declaration public IndustrialAnalogOutV2CurrentRange CurrentRange { get; set; } Property Value Type Description IndustrialAnalogOutV2CurrentRange | Improve this Doc View Source InitialVoltage Gets or sets a value specifying the initial voltage on initialisation. If a value is not provided the voltage will not be changed on initialisation. Declaration public int? InitialVoltage { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source OutLed Gets or sets a value specifying the behaviour of the 'out' LED Declaration public IndustrialAnalogOutV2OutLedConfig OutLed { get; set; } Property Value Type Description IndustrialAnalogOutV2OutLedConfig | Improve this Doc View Source OutLedStatus Gets or sets a value specifying the behavior of the out status LED. Declaration public IndustrialAnalogOutV2OutLedStatusConfig OutLedStatus { get; set; } Property Value Type Description IndustrialAnalogOutV2OutLedStatusConfig | Improve this Doc View Source OutLedStatusMax Gets or sets maximum value of the status LED. Declaration public int OutLedStatusMax { get; set; } Property Value Type Description Int32 | Improve this Doc View Source OutLedStatusMin Gets or sets the minimum value of the status LED. Declaration public int OutLedStatusMin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public IndustrialAnalogOutV2StatusLedConfig StatusLed { get; set; } Property Value Type Description IndustrialAnalogOutV2StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String | Improve this Doc View Source VoltageRange Gets or sets a value specifying the output voltage range. Declaration public IndustrialAnalogOutV2VoltageRange VoltageRange { get; set; } Property Value Type Description IndustrialAnalogOutV2VoltageRange Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Writes only the initial voltage to an Industrial Analog Out Bricklet 2.0. Declaration public IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the written voltage in units of 1mV. | Improve this Doc View Source Process(IObservable<IPConnection>, IObservable<Int32>) Writes a sequence of voltage values to an Industrial Analog Out Bricklet 2.0. Declaration public IObservable<int> Process(IObservable<IPConnection> source, IObservable<int> signal) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. IObservable < Int32 > signal A sequence of Int32 values to write as voltages to the analog out in units of 1mV. Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the written voltage in units of 1mV. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2CurrentRange.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2CurrentRange.html",
    "title": "Enum IndustrialAnalogOutV2CurrentRange",
    "keywords": "Enum IndustrialAnalogOutV2CurrentRange Specifies the current range configuration of the Industrial Analog Out Bricklet 2.0. The resolution will always be 12 bit, therefore precision is higher with a smaller range. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialAnalogOutV2CurrentRange : byte Fields Name Description Range0To20mA The current range will be 0-20mA. Range0To24mA The current range will be 0-24mA. Range4To20mA The current range will be 4-20mA."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2OutLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2OutLedConfig.html",
    "title": "Enum IndustrialAnalogOutV2OutLedConfig",
    "keywords": "Enum IndustrialAnalogOutV2OutLedConfig Specifies the configuration of the Industrial Analog Out Bricklet 2.0. out LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialAnalogOutV2OutLedConfig : byte Fields Name Description Off The out LED will be permanently OFF. On The out LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The out LED will change state periodically every second. ShowOutStatus The out LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2OutLedStatusConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2OutLedStatusConfig.html",
    "title": "Enum IndustrialAnalogOutV2OutLedStatusConfig",
    "keywords": "Enum IndustrialAnalogOutV2OutLedStatusConfig Specifies the configuration of the Industrial Analog Out Bricklet 2.0. out status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialAnalogOutV2OutLedStatusConfig : byte Fields Name Description Intensity The out status LED will function in intensity mode. The LED brightness will scale with a mV or uA value. Threshold The out status LED will function in threshold mode. A positive or negative threshold can be set above or below which the LED will turn on."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2StatusLedConfig.html",
    "title": "Enum IndustrialAnalogOutV2StatusLedConfig",
    "keywords": "Enum IndustrialAnalogOutV2StatusLedConfig Specifies the behavior of the Industrial Analog Out Bricklet 2.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialAnalogOutV2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2VoltageRange.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialAnalogOutV2VoltageRange.html",
    "title": "Enum IndustrialAnalogOutV2VoltageRange",
    "keywords": "Enum IndustrialAnalogOutV2VoltageRange Specifies the voltage range configuration of the Industrial Analog Out Bricklet 2.0. The resolution will always be 12 bit, therefore precision is higher with a smaller range. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialAnalogOutV2VoltageRange : byte Fields Name Description Range0To10V The voltage range will be 0-10V. Range0To5V The voltage range will be 0-5V."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialDual020mAV2.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialDual020mAV2.html",
    "title": "Class IndustrialDual020mAV2",
    "keywords": "Class IndustrialDual020mAV2 Represents an operator that measures current between 0 and 22.5mA from an Industrial Dual 0-20mA Bricklet. Inheritance Object IndustrialDual020mAV2 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class IndustrialDual020mAV2 : Combinator<IPConnection, int> Properties | Improve this Doc View Source Channel Gets or sets a value specifying the channel to read current from. Declaration public byte Channel { get; set; } Property Value Type Description Byte | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig StatusLed { get; set; } Property Value Type Description IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures current from an Industrial Dual 0-20mA Bricklet. Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the current measurements from the Industrial Dual 0-20mA Bricklet in nA. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig.html",
    "title": "Enum IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig",
    "keywords": "Enum IndustrialDual020mAV2.IndustrialDual020mAV2StatusLedConfig Specifies the behavior of the Industrial Dual 0-20mA Bricklet status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialDual020mAV2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialPTC.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialPTC.html",
    "title": "Class IndustrialPTC",
    "keywords": "Class IndustrialPTC Represents an operator that measures temperature with Pt100 and Pt1000 sensors from a Industrial PTC Bricklet. Inheritance Object IndustrialPTC Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class IndustrialPTC : Combinator<IPConnection, int> Properties | Improve this Doc View Source MovingAverageLengthResistance Gets or sets a value specifying the moving average window length for resistance. A value of 1 turns off averaging. Declaration public int MovingAverageLengthResistance { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MovingAverageLengthTemperature Gets or sets a value specifying the moving average window length for temperature. A value of 1 turns off averaging. Declaration public int MovingAverageLengthTemperature { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public IndustrialPTCStatusLedConfig StatusLed { get; set; } Property Value Type Description IndustrialPTCStatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String | Improve this Doc View Source WireMode Gets or sets a value specifying the wire mode of the sensor. Declaration public IndustrialPTCWireMode WireMode { get; set; } Property Value Type Description IndustrialPTCWireMode Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures temperature from a Industrial PTC Bricklet Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the temperature measurements from the Industrial PTC Bricklet in 1/100ths of a degree celsius. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.IndustrialPTCStatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialPTCStatusLedConfig.html",
    "title": "Enum IndustrialPTCStatusLedConfig",
    "keywords": "Enum IndustrialPTCStatusLedConfig Specifies the behavior of the Industrial PTC Bricklet status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialPTCStatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.IndustrialPTCWireMode.html": {
    "href": "api/EmotionalCities.Tinkerforge.IndustrialPTCWireMode.html",
    "title": "Enum IndustrialPTCWireMode",
    "keywords": "Enum IndustrialPTCWireMode Specifies the wire mode configuration of a Industrial PTC Bricklet corresponding the wires of the sensor. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum IndustrialPTCWireMode : byte Fields Name Description WireMode2 The bricklet will use a 2-wire sensor. WireMode3 The bricklet will use a 2-wire sensor. WireMode4 The bricklet will use a 4-wire sensor."
  },
  "api/EmotionalCities.Tinkerforge.ParticulateMatter.html": {
    "href": "api/EmotionalCities.Tinkerforge.ParticulateMatter.html",
    "title": "Class ParticulateMatter",
    "keywords": "Class ParticulateMatter Represents an operator that measures different sizes of particular matter from a Particulate Matter Bricklet. Inheritance Object ParticulateMatter Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class ParticulateMatter : Combinator<IPConnection, ParticulateMatterDataFrame> Properties | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public ParticulateMatterStatusLedConfig StatusLed { get; set; } Property Value Type Description ParticulateMatterStatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures different sizes of particulate matter from a Particulate Matter Bricklet. Declaration public override IObservable<ParticulateMatterDataFrame> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < ParticulateMatterDataFrame > the A sequence of ParticulateMatterDataFrame objects representing the measurements from the Particulate Matter Bricklet. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.ParticulateMatterDataFrame.html": {
    "href": "api/EmotionalCities.Tinkerforge.ParticulateMatterDataFrame.html",
    "title": "Struct ParticulateMatterDataFrame",
    "keywords": "Struct ParticulateMatterDataFrame Represents a set of measurement values sampled from a Particulate Matter Bricklet. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public struct ParticulateMatterDataFrame Constructors | Improve this Doc View Source ParticulateMatterDataFrame(Int32, Int32, Int32) Initializes a new instance of the ParticulateMatterDataFrame structure. Declaration public ParticulateMatterDataFrame(int pm10, int pm25, int pm100) Parameters Type Name Description Int32 pm10 The concentration of PM10. Int32 pm25 The concentration of PM25. Int32 pm100 The concentration of PM100. Fields | Improve this Doc View Source Pm10 Represents the particulate matter concentration of PM10 in units 1ug/m^3. Declaration public int Pm10 Field Value Type Description Int32 | Improve this Doc View Source Pm100 Represents the particulate matter concentration of PM25 in units 1ug/m^3. Declaration public int Pm100 Field Value Type Description Int32 | Improve this Doc View Source Pm25 Represents the particulate matter concentration of PM25 in units 1ug/m^3. Declaration public int Pm25 Field Value Type Description Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.ParticulateMatterStatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.ParticulateMatterStatusLedConfig.html",
    "title": "Enum ParticulateMatterStatusLedConfig",
    "keywords": "Enum ParticulateMatterStatusLedConfig Specifies the behavior of the Particulate Matter Bricklet status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum ParticulateMatterStatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.PTC.html": {
    "href": "api/EmotionalCities.Tinkerforge.PTC.html",
    "title": "Class PTC",
    "keywords": "Class PTC Represents an operator that measures temperature with Pt100 and Pt1000 sensors from a PTC Bricklet. Inheritance Object PTC Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class PTC : Combinator<IPConnection, int> Properties | Improve this Doc View Source MovingAverageLengthResistance Gets or sets a value specifying the moving average window length for resistance. A value of 1 turns off averaging. Declaration public int MovingAverageLengthResistance { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MovingAverageLengthTemperature Gets or sets a value specifying the moving average window length for temperature. A value of 1 turns off averaging. Declaration public int MovingAverageLengthTemperature { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public PTC.PTCStatusLedConfig StatusLed { get; set; } Property Value Type Description PTC.PTCStatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String | Improve this Doc View Source WireMode Gets or sets a value specifying the wire mode of the sensor. Declaration public PTC.PTCWireMode WireMode { get; set; } Property Value Type Description PTC.PTCWireMode Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures temperature from a PTC Bricklet. Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the temperature measurements from the PTC Bricklet. in 1/100ths of a degree celsius. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.PTC.PTCStatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.PTC.PTCStatusLedConfig.html",
    "title": "Enum PTC.PTCStatusLedConfig",
    "keywords": "Enum PTC.PTCStatusLedConfig Specifies the behavior of the PTC Bricklet status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum PTCStatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.PTC.PTCWireMode.html": {
    "href": "api/EmotionalCities.Tinkerforge.PTC.PTCWireMode.html",
    "title": "Enum PTC.PTCWireMode",
    "keywords": "Enum PTC.PTCWireMode Specifies the wire mode configuration of a PTC Bricklet corresponding the wires of the sensor. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum PTCWireMode : byte Fields Name Description WireMode2 The bricklet will use a 2-wire sensor. WireMode3 The bricklet will use a 2-wire sensor. WireMode4 The bricklet will use a 4-wire sensor."
  },
  "api/EmotionalCities.Tinkerforge.PTCV2.html": {
    "href": "api/EmotionalCities.Tinkerforge.PTCV2.html",
    "title": "Class PTCV2",
    "keywords": "Class PTCV2 Represents an operator that measures temperature with Pt100 and Pt1000 sensors from a PTC Bricklet 2.0. Inheritance Object PTCV2 Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class PTCV2 : Combinator<IPConnection, int> Properties | Improve this Doc View Source MovingAverageLengthResistance Gets or sets a value specifying the moving average window length for resistance. A value of 1 turns off averaging. Declaration public int MovingAverageLengthResistance { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MovingAverageLengthTemperature Gets or sets a value specifying the moving average window length for temperature. A value of 1 turns off averaging. Declaration public int MovingAverageLengthTemperature { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public PTCV2.PTCV2StatusLedConfig StatusLed { get; set; } Property Value Type Description PTCV2.PTCV2StatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String | Improve this Doc View Source WireMode Gets or sets a value specifying the wire mode of the sensor. Declaration public PTCV2.PTCV2WireMode WireMode { get; set; } Property Value Type Description PTCV2.PTCV2WireMode Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures temperature from a PTC Bricklet 2.0. Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the temperature measurements from the PTC Bricklet 2.0. in 1/100ths of a degree celsius. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.PTCV2.PTCV2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.PTCV2.PTCV2StatusLedConfig.html",
    "title": "Enum PTCV2.PTCV2StatusLedConfig",
    "keywords": "Enum PTCV2.PTCV2StatusLedConfig Specifies the behavior of the PTC Bricklet 2.0. status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum PTCV2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.PTCV2.PTCV2WireMode.html": {
    "href": "api/EmotionalCities.Tinkerforge.PTCV2.PTCV2WireMode.html",
    "title": "Enum PTCV2.PTCV2WireMode",
    "keywords": "Enum PTCV2.PTCV2WireMode Specifies the wire mode configuration of a PTC Bricklet 2.0. corresponding the wires of the sensor. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum PTCV2WireMode : byte Fields Name Description WireMode2 The bricklet will use a 2-wire sensor. WireMode3 The bricklet will use a 2-wire sensor. WireMode4 The bricklet will use a 4-wire sensor."
  },
  "api/EmotionalCities.Tinkerforge.SoundPressureLevel.html": {
    "href": "api/EmotionalCities.Tinkerforge.SoundPressureLevel.html",
    "title": "Class SoundPressureLevel",
    "keywords": "Class SoundPressureLevel Represents an operator that measures sound pressure level (decibels) and spectrum from a Sound Pressure Level Bricklet. Inheritance Object SoundPressureLevel Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class SoundPressureLevel : Combinator<IPConnection, int> Properties | Improve this Doc View Source FftSize Gets or sets a value specifying the size, resolution and bin size of the FFT. Declaration public SoundPressureLevelFftSize FftSize { get; set; } Property Value Type Description SoundPressureLevelFftSize | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public SoundPressureLevelStatusLedConfig StatusLed { get; set; } Property Value Type Description SoundPressureLevelStatusLedConfig | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String | Improve this Doc View Source Weighting Gets or sets a value specifying decibel weighting function. Declaration public SoundPressureLevelWeightingFunction Weighting { get; set; } Property Value Type Description SoundPressureLevelWeightingFunction Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures sound pressure level from a Sound Pressure Level Bricklet. Declaration public override IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the sound pressure measurements from the Sound Pressure Level Bricklet in units of 1/10th of a decibel. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/EmotionalCities.Tinkerforge.SoundPressureLevelFftSize.html": {
    "href": "api/EmotionalCities.Tinkerforge.SoundPressureLevelFftSize.html",
    "title": "Enum SoundPressureLevelFftSize",
    "keywords": "Enum SoundPressureLevelFftSize Specifies the size of the FFT for the Sound Pressure Level Bricklet. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum SoundPressureLevelFftSize : byte Fields Name Description FftSize1024 Specifies an FFT size of 1024 samples, 512 bins, 10 samples per second. Each bin has size 40Hz. FftSize128 Specifies an FFT size of 128 samples, 64 bins, 80 samples per second. Each bin has size 320Hz. FftSize256 Specifies an FFT size of 256 samples, 128 bins, 40 samples per second. Each bin has size 160Hz. FftSize512 Specifies an FFT size of 512 samples, 256 bins, 20 samples per second. Each bin has size 80Hz."
  },
  "api/EmotionalCities.Tinkerforge.SoundPressureLevelStatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.SoundPressureLevelStatusLedConfig.html",
    "title": "Enum SoundPressureLevelStatusLedConfig",
    "keywords": "Enum SoundPressureLevelStatusLedConfig Specifies the behavior of the Air Quality Bricklet status LED. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum SoundPressureLevelStatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.SoundPressureLevelWeightingFunction.html": {
    "href": "api/EmotionalCities.Tinkerforge.SoundPressureLevelWeightingFunction.html",
    "title": "Enum SoundPressureLevelWeightingFunction",
    "keywords": "Enum SoundPressureLevelWeightingFunction Specifies the decibel weighting function for the Sound Pressure Level Bricklet. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum SoundPressureLevelWeightingFunction : byte Fields Name Description WeightingA Specifies the dB(A) weighting function. WeightingB Specifies the dB(B) weighting function. WeightingC Specifies the dB(C) weighting function. WeightingD Specifies the dB(D) weighting function. WeightingITU Specifies the ITU-R 468 standard weighting function (flat response). WeightingZ Specifies the dB(Z) weighting function (flat response)."
  },
  "api/EmotionalCities.Tinkerforge.ThermocoupleV2.html": {
    "href": "api/EmotionalCities.Tinkerforge.ThermocoupleV2.html",
    "title": "Class ThermocoupleV2",
    "keywords": "Class ThermocoupleV2 Represents an operator that measures temperature using thermocouple wires from a Thermocouple Bricklet 2.0. Inheritance Object ThermocoupleV2 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public class ThermocoupleV2 Properties | Improve this Doc View Source Averaging Gets or sets a value specifying the averaging size. This setting will affect conversion time. Declaration public ThermocoupleV2AveragingSize Averaging { get; set; } Property Value Type Description ThermocoupleV2AveragingSize | Improve this Doc View Source Filter Gets or sets a value specifying the filter frequency. Should be configures according to utility frequency. Declaration public ThermocoupleV2FilterOption Filter { get; set; } Property Value Type Description ThermocoupleV2FilterOption | Improve this Doc View Source Period Gets or sets a value specifying the period between sample event callbacks. A value of zero disables event reporting. Declaration public long Period { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StatusLed Gets or sets a value specifying the behavior of the status LED. Declaration public ThermocoupleV2StatusLedConfig StatusLed { get; set; } Property Value Type Description ThermocoupleV2StatusLedConfig | Improve this Doc View Source Type Gets or sets a value specifying the type of the thermocouple. Different thermocouple types use different types of metals for their wires. Declaration public ThermocoupleV2ThermocoupleType Type { get; set; } Property Value Type Description ThermocoupleV2ThermocoupleType | Improve this Doc View Source Uid Gets or sets the bricklet device UID. Declaration [TypeConverter(typeof(UidConverter))] public string Uid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IPConnection>) Measures temperature using thermocouple wires from a Thermocouple Bricklet 2.0. Declaration public IObservable<int> Process(IObservable<IPConnection> source) Parameters Type Name Description IObservable < IPConnection > source A sequence containing the TCP/IP connection to the Brick Daemon. Returns Type Description IObservable < Int32 > the A sequence of Int32 values representing the measurements from the Thermocouple Bricklet 2.0. in units of 1/100th of a degree (celsius). | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/EmotionalCities.Tinkerforge.ThermocoupleV2AveragingSize.html": {
    "href": "api/EmotionalCities.Tinkerforge.ThermocoupleV2AveragingSize.html",
    "title": "Enum ThermocoupleV2AveragingSize",
    "keywords": "Enum ThermocoupleV2AveragingSize Specifies the averaging size of the Thermocouple Bricklet 2.0. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum ThermocoupleV2AveragingSize : byte Fields Name Description Averaging1 Specifies an averaging size of 1 sample. Averaging16 Specifies an averaging size of 16 samples. Averaging2 Specifies an averaging size of 2 samples. Averaging4 Specifies an averaging size of 4 samples. Averaging8 Specifies an averaging size of 8 samples."
  },
  "api/EmotionalCities.Tinkerforge.ThermocoupleV2FilterOption.html": {
    "href": "api/EmotionalCities.Tinkerforge.ThermocoupleV2FilterOption.html",
    "title": "Enum ThermocoupleV2FilterOption",
    "keywords": "Enum ThermocoupleV2FilterOption Specifies the filtering option for the Thermocouple Bricklet 2.0. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum ThermocoupleV2FilterOption : byte Fields Name Description Filter50Hz Specifies a 50Hz filter will be used giving a conversion time of 98 + (samples - 1) * 20. Filter60Hz Specifies a 60Hz filter will be used giving a conversion time of 82 + (samples - 1) * 16.67."
  },
  "api/EmotionalCities.Tinkerforge.ThermocoupleV2StatusLedConfig.html": {
    "href": "api/EmotionalCities.Tinkerforge.ThermocoupleV2StatusLedConfig.html",
    "title": "Enum ThermocoupleV2StatusLedConfig",
    "keywords": "Enum ThermocoupleV2StatusLedConfig Specifies the behavior of the Thermocouple Bricklet 2.0. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum ThermocoupleV2StatusLedConfig : byte Fields Name Description Off The status LED will be permanently OFF. On The status LED will be permanently ON as long as the bricklet is powered. ShowHeartbeat The status LED will change state periodically every second. ShowStatus The LED will show communication traffic between Brick and Bricklet, flickering once for every 10 received data packets."
  },
  "api/EmotionalCities.Tinkerforge.ThermocoupleV2ThermocoupleType.html": {
    "href": "api/EmotionalCities.Tinkerforge.ThermocoupleV2ThermocoupleType.html",
    "title": "Enum ThermocoupleV2ThermocoupleType",
    "keywords": "Enum ThermocoupleV2ThermocoupleType Specifies the thermocouple type used with the Thermocouple Bricklet 2.0. Namespace : EmotionalCities.Tinkerforge Assembly : EmotionalCities.Tinkerforge.dll Syntax public enum ThermocoupleV2ThermocoupleType : byte Fields Name Description TypeB Specifies a thermocouple of type B will be used. TypeE Specifies a thermocouple of type E will be used. TypeG32 Specifies a thermocouple of type G32 will be used. If this thermocouple type is used the returned temperature value will be calculated by the formula 32 * 1.6 * 2^17 * Vin. TypeG8 Specifies a thermocouple of type G8 will be used. If this thermocouple type is used the returned temperature value will be calculated by the formula 8 * 1.6 * 2^17 * Vin. TypeJ Specifies a thermocouple of type J will be used. TypeK Specifies a thermocouple of type K will be used. TypeN Specifies a thermocouple of type N will be used. TypeR Specifies a thermocouple of type R will be used. TypeS Specifies a thermocouple of type S will be used. TypeT Specifies a thermocouple of type T will be used."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started",
    "keywords": "Getting Started Download Bonsai . From the package manager, search and install the Emotional Cities - Tinkerforge package. Warning The Tinkerforge package requires the Brick Daemon service to be running in the background on the host computer to which the Bricks/Bricklets are connected. Please see the Tinkerforge documentation page for installation instructions."
  },
  "index.html": {
    "href": "index.html",
    "title": "Emotional Cities - Tinkerforge Documentation",
    "keywords": "Emotional Cities - Tinkerforge Documentation EmotionalCities.Tinkerforge is a Bonsai interface for Tinkerforge hardware allowing data acquisition and control of Bricks and Bricklet devices. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links to Improve this Doc . This package was developed for the eMOTIONAL CITIES Project, which received funding from European Union’s Horizon 2020 research and innovation programme, under the grant agreement No 945307. The eMOTIONAL CITIES Project is a consortium of 12 partners co-coordinated by IGOT and FMUL, taking place between 2021 and 2025. More information at https://emotionalcities-h2020.eu/"
  }
}